// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MeshServiceClient is the client API for MeshService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeshServiceClient interface {
	GetMeshBlocks(ctx context.Context, in *GetMeshRequest, opts ...grpc.CallOption) (MeshService_GetMeshBlocksClient, error)
}

type meshServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeshServiceClient(cc grpc.ClientConnInterface) MeshServiceClient {
	return &meshServiceClient{cc}
}

func (c *meshServiceClient) GetMeshBlocks(ctx context.Context, in *GetMeshRequest, opts ...grpc.CallOption) (MeshService_GetMeshBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &MeshService_ServiceDesc.Streams[0], "/MeshService/GetMeshBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &meshServiceGetMeshBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MeshService_GetMeshBlocksClient interface {
	Recv() (*GetMeshResult, error)
	grpc.ClientStream
}

type meshServiceGetMeshBlocksClient struct {
	grpc.ClientStream
}

func (x *meshServiceGetMeshBlocksClient) Recv() (*GetMeshResult, error) {
	m := new(GetMeshResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MeshServiceServer is the server API for MeshService service.
// All implementations must embed UnimplementedMeshServiceServer
// for forward compatibility
type MeshServiceServer interface {
	GetMeshBlocks(*GetMeshRequest, MeshService_GetMeshBlocksServer) error
	mustEmbedUnimplementedMeshServiceServer()
}

// UnimplementedMeshServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMeshServiceServer struct {
}

func (UnimplementedMeshServiceServer) GetMeshBlocks(*GetMeshRequest, MeshService_GetMeshBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMeshBlocks not implemented")
}
func (UnimplementedMeshServiceServer) mustEmbedUnimplementedMeshServiceServer() {}

// UnsafeMeshServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeshServiceServer will
// result in compilation errors.
type UnsafeMeshServiceServer interface {
	mustEmbedUnimplementedMeshServiceServer()
}

func RegisterMeshServiceServer(s grpc.ServiceRegistrar, srv MeshServiceServer) {
	s.RegisterService(&MeshService_ServiceDesc, srv)
}

func _MeshService_GetMeshBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMeshRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MeshServiceServer).GetMeshBlocks(m, &meshServiceGetMeshBlocksServer{stream})
}

type MeshService_GetMeshBlocksServer interface {
	Send(*GetMeshResult) error
	grpc.ServerStream
}

type meshServiceGetMeshBlocksServer struct {
	grpc.ServerStream
}

func (x *meshServiceGetMeshBlocksServer) Send(m *GetMeshResult) error {
	return x.ServerStream.SendMsg(m)
}

// MeshService_ServiceDesc is the grpc.ServiceDesc for MeshService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeshService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MeshService",
	HandlerType: (*MeshServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMeshBlocks",
			Handler:       _MeshService_GetMeshBlocks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/mesh_service.proto",
}
